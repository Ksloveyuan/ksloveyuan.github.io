<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on 稀里稀里哗啦啦</title>
    <link>http://www.example.com/</link>
    <description>Recent content in Home on 稀里稀里哗啦啦</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 16 Dec 2019 22:46:01 +0800</lastBuildDate>
    
	<atom:link href="http://www.example.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About Me</title>
      <link>http://www.example.com/authors/me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/authors/me/</guid>
      <description>我是
 一名会点前端的后端程序员，偏偏对区块链最感兴趣。
 相信
 自律给我自由。
 </description>
    </item>
    
    <item>
      <title>关于面试，我有话说</title>
      <link>http://www.example.com/posts/interview_another_thinking/</link>
      <pubDate>Mon, 16 Dec 2019 22:46:01 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_another_thinking/</guid>
      <description>引言 话说距离上次写的关于面试的换位思考已过去一个半月有余，这段时间，我不仅找到了下一份工作，并且在入职又成为了面试官。目前负责从头开始组建上海开发团队，面试可是头一次成为我工作的重心。
谈起面试，这两年我是没少折腾，工作换了三次，大大小小面试下来估计有30次，好像比我面试别人的次数都多。
自己的面试策略基本是“以赛代练”，通常不断的面试，找到自己的薄弱之处，然后做针对性的加强。
如何面试候选人 但是，换个位置，身为面试官，应该如何制定自己的考察策略呢？
“攻防同源”，从具体问题出发，我回想之前面试过的公司，后端面试的问题基本上可以分为以下几类： 1. 纯算法或者数据结构 2. 编程语言特性。比如： golang的GPM，js的delete操作符。 3. Redis的使用。高并发下缓存的设计和分布式锁问的最的次数最多。 4. MySql的索引和锁（这个基本上是必问）。 5. 项目经验（*貌似项目经验的问题比较少，一方面，也许是很难有同样的项目，可以直接复用经验；另一方面，需要面试官从你的描述中甄别出你实际贡献的价值，对面试官何尝不是一种考验*） 6. 线下大作业（talk is cheap, show me the code。 说不定这是最好的方式，只是需要候选人花更多的时间）
在上一篇文章中，我认为1-4的考查方式是基于易量化、易衡量的角度，这种简单又直接的考察对“买方”市场，即不差人来面试的大厂不失为一种好方法。毕竟如果一天要面5、6个人，没个模板辅助，实在是没精力一个个问下来。（*于是，现在流行面试也是可以背过的*）
那如果没那么多人来面试，是不是就要以项目经验为主呢？（*一定不能非黑即白*）
这点还真是有待考虑的，有的人是做了很多但却说不出来；或者是说的很“*简单*”，让你丝毫感觉不到价值；但最怕的是，一个人说的天花烂醉，实际确眼高手低，入职后，还是个害群之马。
Best Fit优于Best Engineer 想来想去，如果真有什么策略的话，我觉得就一个，找合适的。
这还真不是费话！很久之前（*估计三年前吧*）， 身为工程师的我一度认为招人一定要招Best Engineer，当自己的职位变成team lead后，需要考虑更多的角度，取舍平衡后，要找的是Best Fit！
这个Fit的程度，一方面取决于具体的技能要求；另一方面，也受招聘团队的现有人员组成、职位预算、招聘的不同阶段、管理成本甚至是三观是否一致而定。
所以，如果你曾经遇到过聊的很好，但却没收到offer的情况，那可能真的不是你实力不行，更可能是在其它方面，你很可惜，不是最合适的（*想到这，不禁释怀过去没能拿到offer的几次面试*）。
而我现在公司thunes上海团队开放的职位有两个，全栈开发（vueJs+python或golang）和后端开发golang。
考虑到马上要开始的新项目，自己的技术栈储备，眼下对我来说，招一个全栈开发，或者产前端实力优于后端的开发是最符合我眼下需求的。我们的面试主要以大作业为主，更看重候选人的工程能力。欢迎大家自荐和推荐。简历请发送邮箱jeremy.liu@thunes.com。
话说，怎么写着写着就成招聘贴了……</description>
    </item>
    
    <item>
      <title>面试回顾与解析：在O(logN)时间复杂度下求二叉树中序后继</title>
      <link>http://www.example.com/posts/interview_tree_1/</link>
      <pubDate>Thu, 28 Nov 2019 23:25:20 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_tree_1/</guid>
      <description>回顾 话说，一多个月前，那时我刚刚开始找工作，对猎头推的一家跨境电商w**h很感兴趣，大有志在必得的兴致。
猎头和我打过招呼，这家公司算法必考，无奈只有一周时间复习的我，按照自己的猜测，在leetcode上重点的刷了下字符串、动态规划之类的题。
可惜压题失败，真正面试时，面试官考的是二叉树中序后继。唉，当场先是有些失落，接着就是一点小紧张。
 回想起来，幸亏面试是通过牛客网做的远程面试，要不这些情绪变化一定落在的面试官眼里。
 心神不宁的我，又偏偏遇上了一个较真的面试官，非让我和他说清楚思路再开始写……
当场我是没有完全写出来，但心中确是很不服气，毕竟已经写出大半。于是，面试完又努力了一下，把代码完整的写了出来，发给HR。心想着如果转给面试官看一看，也许还有一线生机，但最终还是跪了……
回顾完了面试过程，下面进入正题。
题目 给一个二叉树，以及一个节点(此节点在二叉树中一定存在)，求该节点的中序遍历后继，如果没有返回null
树节点的定义如下：
type TreeNode struct { Val int Parent *TreeNode Left *TreeNode Right *TreeNode } 思路分析 首先，树的中序遍历是遵循（左）-（根）-（右）的顺序依次输出树的节点。
于是，要想知道当前节点的中序后继是什么，首先要知道当前节点在它的父节点的左侧还是右侧。
如果它是在其父节点的左侧，那就简单了，直接返回它的父节点就好。
如果它是在其父节点的右侧，情况又分为以下两种： 1. 如果它有右侧的子节点，那么下一个节点就是以它右侧子节点为根的子树的最左侧节点。 2. 如果它没有右侧子节点，需要向上回溯它的父节点，然后用这个父节点为新的当前节点，在排除已经访问过的节点的前提下，重复上述的判断过程。
根据这个思路，我写了下面的解法。
解法 func FindNext(root, toFind *TreeNode) *TreeNode { tmpCurr := toFind paths := []*TreeNode {tmpCurr} for tmpCurr.Parent != nil{ paths = append(paths, tmpCurr.Parent) tmpCurr = tmpCurr.Parent } tmpCurr = paths[0] leftRights := []bool{} for i:=1; i&amp;lt;len(paths); i++{ parent := paths[i] if parent.</description>
    </item>
    
    <item>
      <title>原来，这才是html&#43;css导出word最佳方式！</title>
      <link>http://www.example.com/posts/html_to_word/</link>
      <pubDate>Fri, 15 Nov 2019 11:23:48 +0800</pubDate>
      
      <guid>http://www.example.com/posts/html_to_word/</guid>
      <description>转个word很难吗？ 对于任何一个在线富文本写作产品，导出功能是必不可少的，其中导出word是其中最常见的选项，但是很多产品导出的word，比如说Jira，格式就有不同程度的失真.
仔细分析下来，解决这个思路的主要有两种：
 硬转：使用OpenXml的SDK，逐一匹配html标签和样式css，相当于用OpenXml实现了一个html+css的渲染层。 偷懒：想办法把html+css的内容当成word的一部分，相当于用web视图打开。  当时，我花了一定的时间，在两个方向上分别做了调研。
硬转的思路，直觉上工作量就极大，而且很容易出Bug，毕竟那么多组合情况需要考虑。值得参考的项目是html2openxml，但1W多行只能实现html的转换，还不包括css。
不是没想过，限制输出html的排版，比如用固定的id代表固定的部分，css样式也只支持特定的几种，但后来讨论下来，觉得这种方法，需要前后端确定好规则，而在当时快速迭代的时期，这无疑会增加开发成本。
而偷懒这条路，能够搜索到项目，都是借用了word中altchunks的特性，比如:html-docx-js、html2docx。
问题也很明显，
 不支持float之类的样式，对图片的支持也需要自己写代码转base64，然后嵌进标签里。这些虽然麻烦些，但是还是可以tweak。 最麻烦的是，这种格式的word，兼容性很差，在微信中、mac上打不开。  于是，我一度卡在这里很久，直到我发现……
原来，word才是转word的最佳工具 转机来的也很突然，就是我发现用word打开一个带html+css的文件后，再另存成word，不仅格式得到了保留，图片也在，而且兼容性也还不错！真是
 踏破铁鞋无觅处，得来全不费工夫。
 问题来了，怎么把这一步程序化呢？
这下终于可以用上过去.net的开发经验了，C#是可以通过com组件的方式操作word，但前提是运行程序的机器上必须装word才行。
核心代码，也是非常的简单：
首先引用Microsoft.Office.Interop.Word，调用的代码如下:
var word = new Application {Visible = false}; var doc = word.Documents.Open(htmlFilePath, Format: WdOpenFormat.wdOpenFormatWebPages,ReadOnly: false); doc.SaveAs2000(wordFilePath, WdSaveFormat.wdFormatDocumentDefault,ReadOnlyRecommended: false); doc.Close(); word.quit()  是不是很简单呢？
而这里唯一还需要处理的就是图片，如果不做处理，图片还是以链接的方式存储的。
一方面，每次打开的时候需要重复下载，好处是word文件比较小，但缺点是受限于网速，可能会出现图片加载不出来的情况;
另一方面时，如果图片没有指定宽度和高度，当图片的尺寸大于文档的尺寸时，显示的效果就很差。
估化的思路很简单，即强行把图片的尺寸拉伸到一页可以显示下，同时将图片链接转成内嵌的图片。
foreach (InlineShape s in doc.InlineShapes) { var inlineShape = s; if (inlineShape.Type != WdInlineShapeType.wdInlineShapePicture &amp;amp;&amp;amp; inlineShape.Type != WdInlineShapeType.</description>
    </item>
    
    <item>
      <title>关于面试的换位思考</title>
      <link>http://www.example.com/posts/interview_reverse_thinking/</link>
      <pubDate>Tue, 22 Oct 2019 22:42:30 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_reverse_thinking/</guid>
      <description>我当面试官时 之前公司招后端程序员的时候，我负责考察面试者golang的掌握程度。
通常我是要求面试者上机用channel写一个多常驻协程的任务队列，然后再不断的延伸发问，考察面试者对goroutine和channel的掌握。
如果面试者写不出来，我基本是不给过的。因为这是我认为的一个golang程序与其它语言程序最大的不同，如果写不出来就代表没真正的用过golang。
我当面试者时 风水轮流转，公司因为融资问题，经营不下去了，我只能再次踏上找工作的路。
虽说在这份工作中，我得到了自己想要的golang工作经历，但是对golang语言细节的掌握还是有些粗糙的。而转型当互联网行业的开发后，我对redis和kafka之类mq的使用，还不曾有过深入的使用，也成了自己的软肋。
最近的一次面试，就是挂在了这上面。
关于，golang的GPM、协程的调度方式，包的初始化顺序等细节问题，我没有答上来。加上偏偏他又问我有没有用过redis和kafka，和数据库有几种锁。。
虽说这些知识点不是完全不知道（*但回答的不是很准确*），可能会缺乏解决某些问题的能力，但具体是哪些问题呢？面试官又说不清楚。
我之前是不大认可这种搜索就能得到答案的问题，但换个角度来想。
一个面试官如何考察面试者的水平？ 无非是基于他认为是重要的知识点！于是，不免有认知偏见。
话说回来，对于一个工程师而言，最重要的不应该是他的学习和解决问题的能力吗？
对于一个资深的程序员，分析问题并合理的设计可扩展可维护的方案不才是他的价值所在吗？
那么，为什么面试时确要用语言细节+使用的工具经验来考察面试者呢？甚至还会是用纯算法来考察面试者？
想来想去，我的初步结论是：学习能力、解决问题的能力和设计能力难以被量化衡量，所以只能间接的借用一些特征来辅助判断，比如说语言的掌握程度、算法能力等。
再加上国内的互联网企业的招聘更重视“开箱即用”，所以才有用没用过、知不知道之类的问题吧。
接着换位思考一下，如果面试者这些不知道、没用过，只表示说愿意学，确实对面试官没很大的吸引力，毕竟来面试的人又不少。
写到这时，突然领悟，面试的考察方式在根本上取决于到底是买方市场还是卖方市场。
好吧，赶紧睡了，明天还要抓紧刷&amp;rdquo;面试常问题库&amp;rdquo;呢 ^_^</description>
    </item>
    
    <item>
      <title>pandas&#43;pyecharts实践笔记：比特币价格分析</title>
      <link>http://www.example.com/posts/btc_price_analysis/</link>
      <pubDate>Tue, 08 Oct 2019 21:12:52 +0800</pubDate>
      
      <guid>http://www.example.com/posts/btc_price_analysis/</guid>
      <description>tl;dr：眼下极有可能是本年度第二个最佳定投区间
 引言 我的签名是： &amp;gt; 会点前端的后端开发，偏偏对区块链最感兴趣。
虽然上一份从事区块链相关的工作无疾而终，但我还一直在关注区块链行业的发展。
区块链行业的龙头老大是非比特币莫属。除了技术以外，估计大家更关心的是它的价格。 恰巧最近读了九神《屯比特币》的系列文章，其中的一篇寻找合适的够买时机分享了关于定投择时的策略，核心观点是:
 那么，具体在什么区间内购买比特币最划算呢？同时满足两个条件：
比特币价格低于200日定投平均成本，意味着在这个时候买币，可以跑赢定投的人。
比特币价格低于指数增长模型的估值，意味着在这个时候，币价被低估了。
 我读下来觉得遗憾的地方在于，这篇文章是成文于2018-10-07，转眼一年过去了，而由于文中的相关图表是图片，没有持续更新，那么眼下这个时间点时否满足九神提出的两个条件呢？
正好我缺一个机会践习python的数据分析，于是，就开始边搜边学边试的摸索之路。
实现步骤 第一步，自然是要获取数据。先是搜索了一番没找到合适的地方直接下载，只能转换思路去爬取。目标有两个，要么是交易所;要么是行情类网站。
我选择了非小号这个平台，因为有历史数据页面。
通过浏览器的开发工具，很容易就可以通过get请求获得数据并解析。因为代码过于简单就不贴出来，有兴趣的朋友，可以点击btc_price_analyzer查看。
第二步，是计量200日的定投平均成本（*即几何平均数*）及价格比例，这正是pandas所擅长的。但当时的我完全没有经验，磕磕绊绊才写出了下面的代码。
def close_ratio(close, base): return close * 1.0 / base ma_list = [100, 200] //不知道为什么九神选择了200日均线，这里我把100日均线也打出来做对比。 for ma in ma_list: ma_str = str(ma) price_data[&amp;#39;GMA_&amp;#39; + ma_str] = price_data[&amp;#39;closeprice&amp;#39;].rolling( window=ma, min_periods=1).apply(gmean, raw=True) for ma in ma_list: ma_str = str(ma) price_data[&amp;#34;GMA_Ratio_&amp;#34; + ma_str] = price_data.apply( lambda x: close_ratio(x[&amp;#39;closeprice&amp;#39;], x[&amp;#39;GMA_&amp;#39; + ma_str]), axis=1) 唯一值得说明的是，pandas的rolling函数只有mean方法，而没有gmean的。我是引用了scipy包实现的。</description>
    </item>
    
    <item>
      <title>比特币（btc）价格分析</title>
      <link>http://www.example.com/page/btc_price_analyzer/</link>
      <pubDate>Mon, 07 Oct 2019 17:29:00 +0800</pubDate>
      
      <guid>http://www.example.com/page/btc_price_analyzer/</guid>
      <description>Awesome-pyecharts     .tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; } .tab button { background-color: inherit; float: left; border: none; outline: none; cursor: pointer; padding: 12px 16px; transition: 0.3s; } .tab button:hover { background-color: #ddd; } .tab button.active { background-color: #ccc; } .chart-container { display: none; padding: 6px 12px; border-top: none; }  overall ratio distribution    var chart_f1c05403063e4a17820fd54cb873c898 = echarts.init( document.</description>
    </item>
    
    <item>
      <title>如何用Golang的channel实现消息的批量处理</title>
      <link>http://www.example.com/posts/channelx_aggregator/</link>
      <pubDate>Thu, 26 Sep 2019 23:25:47 +0800</pubDate>
      
      <guid>http://www.example.com/posts/channelx_aggregator/</guid>
      <description>引言 话说，有这样一个场景，就是客户送不断发送消息，需要服务端异步处理。
一个一个的处理未免有些浪费资源，更好的方法是批量处理。
当消息量特别大时，使用kafka之类的message queue自然是首选，但更多的时候，我们想用更加轻量的方案来解决这个问题。
下面来详细分析一下技术需求，这个方案需要实现以下几点： - 消息聚合后处理（最大条数为BatchSize） - 延迟处理（延迟时间为LingerTime） - 自定义错误处理 - 并发处理
实现 基于这样的需求，我快速的实现了第一步，消息聚合后处理。
var ( eventQueue = make(chan interface{}, 4) batchSize = 8 workers = 2 batchProcessor = func(messages []interface{}) { fmt.Printf(&amp;#34;%+v \n&amp;#34;, messages) } ) for i := 0; i &amp;lt; workers; i++ { go func() { var batch []interface{} for { msg := &amp;lt;-eventQueue batch = append(batch, msg) if len(batch) == batchSize { batchProcessor(batch) batch = make([]interface{}, 0) } } }() } for i := 0; i &amp;lt; 100; i++ { eventQueue &amp;lt;- i } 代码虽然简单，但是核心已经有了。 - 带buffer的channel相当于一个FIFO的队列 - 多个常驻的goroutine来提高并发 - goroutine之间是并行的，但每个goroutine内是串行的，所以对batch操作是不用加锁的。</description>
    </item>
    
    <item>
      <title>用Nginx配置https证书，你绝对不能忽略这一点！</title>
      <link>http://www.example.com/posts/nginx_https_ssl/</link>
      <pubDate>Tue, 24 Sep 2019 21:58:12 +0800</pubDate>
      
      <guid>http://www.example.com/posts/nginx_https_ssl/</guid>
      <description> 前言 话说，刚刚过去的周六下午（ 我们是调休，可不是996哦 ），测试同学突然大叫，
 网站、小程序，怎么所有的功能都不work了!
 当时，那可是真的慌呀 &amp;gt;_&amp;lt;!!
还好强大的chrome第一时间提示，网站的SSL证书过期了。赶紧第一时间联系CTO，给证书绪个费。然后运维同学依次给服务器、CDN服务更新了证书，看到网站和小程序又可以访问了，大家都松了一口气，吐槽了一番，就开心过周末去了。
哪知道，周一刚回来，就听到运营的同学说有的客户反应一些爬虫和客户端服务程序都不工作了。
排查 几位后端的同学赶紧查了一通日志，发现很多后台的长驻服务，以及客户端的程序都是在调用登录接口的时候失败。
奇怪的是同样的https接口，浏览器中的前端程序调用就没问题，后端同学用postman调用就是失败的。根据postman的提示，把ssl关了一切就又好了。
一时间，大家都有些懵，虽说直觉告诉我一定和证书过期有关系，但是该更新的地方都更新了，问题会出在哪了？是不是有地方忘记更新了？
整个上午，百度、bing、google，搜索了大量nginx+https的文章，却大同小异。
话说该配置的都配置了，会不会是证书有问题呢？这个想法一闪而过的瞬间，下意识的 ll ，让我注意到了新的证书和备份的旧证书文件大小差了5kb。3kb VS 8kb，这个差距可不能忽略！
赶紧找运维同学重新下载了证书文件。
++咦？惊喜的发现第二个文件和第三个文件加起了不正好是8kb吗，这应该不是巧合。++
心想死马当活马医吧，把两文件一合并，扔到了服务上。nginx -s reload一敲，困扰了一上午的问题竟然好了！
之前做过区块链项目，有些密码学的基本知识，让我知道，这个大小5kb的文件应该是中间证书。（背景知识：根证书和中间证书的区别）
用这个中间证书+nginx+https来搜索，让我很快的找到了原因。
原来，如果在Apache中配置证书时，是有certificate chain这个属性来指定中间证书的。
Nginx没有Certificat Chain这个参数，如果有中间证书，需要把域名证书和中间证书合并，然后指定给ssl_certificate才行。
重要的事情再说一遍， &amp;gt; 用Nginx配置https证书，如果有中间证书，一定要和域名证书合并, 再指定给ssl_certificate。
话说，我司的证书是在Go Daddy上买的，下载时没有nginx的选项，所以选择了Apache，中间证书是分开的，就踩了这个坑。如果证书厂商提供了nginx下载选项，那么下载的证书应是合并后的，就应该没有这个问题了.
总结和反思 虽说，这个问题是有惊无险的解决了，但值得反思和总结的是：
 公司创立刚满一年，很多机制还是不够健全，证书是到过期了才发现，没有事先的提醒。 在服务器操作配置文件，一定要备份，关键时刻比较文件大小也有奇效！:) 最后，用Nginx配置https证书时，中间证书一定要和域名证书合并！  </description>
    </item>
    
    <item>
      <title>为什么所有的查询条件都命中索引还是那么慢？记一次慢查询优化过程</title>
      <link>http://www.example.com/posts/slow_sql_analysis_1/</link>
      <pubDate>Thu, 19 Sep 2019 23:46:57 +0800</pubDate>
      
      <guid>http://www.example.com/posts/slow_sql_analysis_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>如何把Golang的channel用的如nodejs的stream一样丝滑</title>
      <link>http://www.example.com/posts/channelx_stream/</link>
      <pubDate>Fri, 13 Sep 2019 23:43:24 +0800</pubDate>
      
      <guid>http://www.example.com/posts/channelx_stream/</guid>
      <description></description>
    </item>
    
    <item>
      <title>内部API的安全防护怎么搞？密码学中有答案</title>
      <link>http://www.example.com/posts/api_security/</link>
      <pubDate>Mon, 26 Aug 2019 23:39:00 +0800</pubDate>
      
      <guid>http://www.example.com/posts/api_security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Step by step 搭建Gitlab CI Pipeline的监控Dashboard</title>
      <link>http://www.example.com/posts/gitlab_ci_dashboard/</link>
      <pubDate>Fri, 23 Aug 2019 23:33:12 +0800</pubDate>
      
      <guid>http://www.example.com/posts/gitlab_ci_dashboard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>记一次golang程序CPU高的排查过程</title>
      <link>http://www.example.com/posts/golang_high_cpu/</link>
      <pubDate>Mon, 12 Aug 2019 23:48:17 +0800</pubDate>
      
      <guid>http://www.example.com/posts/golang_high_cpu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>解析一道区块链行业前三公司的笔试题</title>
      <link>http://www.example.com/posts/interview_bft_1/</link>
      <pubDate>Sun, 28 Jul 2019 23:21:16 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_bft_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gorm的使用心得和一些常用扩展(二)</title>
      <link>http://www.example.com/posts/gorm_extension_2/</link>
      <pubDate>Thu, 18 Jul 2019 23:47:04 +0800</pubDate>
      
      <guid>http://www.example.com/posts/gorm_extension_2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gorm的使用心得和一些常用扩展(一)</title>
      <link>http://www.example.com/posts/gorm_extension_1/</link>
      <pubDate>Sat, 13 Jul 2019 15:46:36 +0800</pubDate>
      
      <guid>http://www.example.com/posts/gorm_extension_1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Logstash Docker部署的踩坑笔记</title>
      <link>http://www.example.com/posts/logstash_docker_note/</link>
      <pubDate>Sat, 29 Jun 2019 00:43:12 +0800</pubDate>
      
      <guid>http://www.example.com/posts/logstash_docker_note/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search</title>
      <link>http://www.example.com/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>