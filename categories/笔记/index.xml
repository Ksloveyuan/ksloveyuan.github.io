<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on 稀里稀里哗啦啦</title>
    <link>http://www.example.com/categories/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on 稀里稀里哗啦啦</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Sep 2021 17:37:06 +0800</lastBuildDate><atom:link href="http://www.example.com/categories/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang实现SOAP客户端的经验总结</title>
      <link>http://www.example.com/posts/golang_soap_client/</link>
      <pubDate>Sun, 26 Sep 2021 17:37:06 +0800</pubDate>
      
      <guid>http://www.example.com/posts/golang_soap_client/</guid>
      <description>引言 SOAP 是一种“简单”的基于 XML 的协议，在 10 多年前流行过一阵。与现在行其道的基于 JSON 协议的 restFul API 相比，SOAP 无疑要笨重许多。
如果项目的开发语言是.net 或者 Java，那还好还，因为 IDE 有方便的内置功能来解析 SOAP 服务的 WSDL 文件，自动生成 Client 的相关代码。但如果是用 Golang，那就麻烦了。
下面说说 SOAP 的不同之处，或者说麻烦的地方。
SOAP 的不同之处  Request/Response 结构复杂，嵌套层级多且深  下面是一个 Request Body 的示例，这个 XML 是必须指定特定的 namespace 的。API 的验证密钥信息，也是要写在 Request Body 中。
&amp;lt;soapenv:Envelope xmlns:ns=&amp;#34;http://www.id3global.com/ID3gWS/2013/04&amp;#34; xmlns:soap=&amp;#34;soap&amp;#34; xmlns:soapenv=&amp;#34;http://schemas.xmlsoap.org/soap/envelope/&amp;#34;&amp;gt; &amp;lt;soapenv:Header xmlns:wsa=&amp;#34;http://www.w3.org/2005/08/addressing&amp;#34;&amp;gt; &amp;lt;wsse:Security soapenv:mustUnderstand=&amp;#34;1&amp;#34; xmlns:wsse=&amp;#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd&amp;#34; xmlns:wsu=&amp;#34;http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd&amp;#34;&amp;gt; &amp;lt;wsse:UsernameToken&amp;gt; &amp;lt;wsse:Username&amp;gt;&amp;lt;/wsse:Username&amp;gt; &amp;lt;wsse:Password&amp;gt;&amp;lt;/wsse:Password&amp;gt; &amp;lt;/wsse:UsernameToken&amp;gt; &amp;lt;/wsse:Security&amp;gt; &amp;lt;/soapenv:Header&amp;gt; &amp;lt;soapenv:Body&amp;gt; &amp;lt;/soapenv:Body&amp;gt; &amp;lt;/soapenv:Envelope&amp;gt; 通常soapenv:Body部分通常是会更加复杂的，如果没有工具支持，纯手工来写，累人不说，还容易出错。
 Header 的设置  Content-Type: text/xml; charset=&amp;quot;utf-8&amp;quot; SOAPAction: http://www.</description>
    </item>
    
    <item>
      <title>原来，这才是html&#43;css导出word最佳方式！</title>
      <link>http://www.example.com/posts/html_to_word/</link>
      <pubDate>Fri, 15 Nov 2019 11:23:48 +0800</pubDate>
      
      <guid>http://www.example.com/posts/html_to_word/</guid>
      <description>转个word很难吗？ 对于任何一个在线富文本写作产品，导出功能是必不可少的，其中导出word是其中最常见的选项，但是很多产品导出的word，比如说Jira，格式就有不同程度的失真.
仔细分析下来，解决这个思路的主要有两种：
 硬转：使用OpenXml的SDK，逐一匹配html标签和样式css，相当于用OpenXml实现了一个html+css的渲染层。 偷懒：想办法把html+css的内容当成word的一部分，相当于用web视图打开。  当时，我花了一定的时间，在两个方向上分别做了调研。
硬转的思路，直觉上工作量就极大，而且很容易出Bug，毕竟那么多组合情况需要考虑。值得参考的项目是html2openxml，但1W多行只能实现html的转换，还不包括css。
不是没想过，限制输出html的排版，比如用固定的id代表固定的部分，css样式也只支持特定的几种，但后来讨论下来，觉得这种方法，需要前后端确定好规则，而在当时快速迭代的时期，这无疑会增加开发成本。
而偷懒这条路，能够搜索到项目，都是借用了word中altchunks的特性，比如:html-docx-js、html2docx。
问题也很明显，
 不支持float之类的样式，对图片的支持也需要自己写代码转base64，然后嵌进标签里。这些虽然麻烦些，但是还是可以tweak。 最麻烦的是，这种格式的word，兼容性很差，在微信中、mac上打不开。  于是，我一度卡在这里很久，直到我发现……
原来，word才是转word的最佳工具 转机来的也很突然，就是我发现用word打开一个带html+css的文件后，再另存成word，不仅格式得到了保留，图片也在，而且兼容性也还不错！真是
 踏破铁鞋无觅处，得来全不费工夫。
 问题来了，怎么把这一步程序化呢？
这下终于可以用上过去.net的开发经验了，C#是可以通过com组件的方式操作word，但前提是运行程序的机器上必须装word才行。
核心代码，也是非常的简单：
首先引用Microsoft.Office.Interop.Word，调用的代码如下:
var word = new Application {Visible = false}; var doc = word.Documents.Open(htmlFilePath, Format: WdOpenFormat.wdOpenFormatWebPages,ReadOnly: false); doc.SaveAs2000(wordFilePath, WdSaveFormat.wdFormatDocumentDefault,ReadOnlyRecommended: false); doc.Close(); word.quit() 是不是很简单呢？
而这里唯一还需要处理的就是图片，如果不做处理，图片还是以链接的方式存储的。
一方面，每次打开的时候需要重复下载，好处是word文件比较小，但缺点是受限于网速，可能会出现图片加载不出来的情况;
另一方面时，如果图片没有指定宽度和高度，当图片的尺寸大于文档的尺寸时，显示的效果就很差。
估化的思路很简单，即强行把图片的尺寸拉伸到一页可以显示下，同时将图片链接转成内嵌的图片。
foreach (InlineShape s in doc.InlineShapes) { var inlineShape = s; if (inlineShape.Type != WdInlineShapeType.wdInlineShapePicture &amp;amp;&amp;amp; inlineShape.Type != WdInlineShapeType.wdInlineShapeLinkedPicture) { continue; } if (inlineShape.</description>
    </item>
    
    <item>
      <title>pandas&#43;pyecharts实践笔记：比特币价格分析</title>
      <link>http://www.example.com/posts/btc_price_analysis/</link>
      <pubDate>Tue, 08 Oct 2019 21:12:52 +0800</pubDate>
      
      <guid>http://www.example.com/posts/btc_price_analysis/</guid>
      <description>tl;dr：眼下极有可能是本年度第二个最佳定投区间
 引言 我的签名是：
 会点前端的后端开发，偏偏对区块链最感兴趣。
 虽然上一份从事区块链相关的工作无疾而终，但我还一直在关注区块链行业的发展。
区块链行业的龙头老大是非比特币莫属。除了技术以外，估计大家更关心的是它的价格。 恰巧最近读了九神《屯比特币》的系列文章，其中的一篇寻找合适的够买时机分享了关于定投择时的策略，核心观点是:
 那么，具体在什么区间内购买比特币最划算呢？同时满足两个条件：
比特币价格低于200日定投平均成本，意味着在这个时候买币，可以跑赢定投的人。
比特币价格低于指数增长模型的估值，意味着在这个时候，币价被低估了。
 我读下来觉得遗憾的地方在于，这篇文章是成文于2018-10-07，转眼一年过去了，而由于文中的相关图表是图片，没有持续更新，那么眼下这个时间点时否满足九神提出的两个条件呢？
正好我缺一个机会践习python的数据分析，于是，就开始边搜边学边试的摸索之路。
实现步骤 第一步，自然是要获取数据。先是搜索了一番没找到合适的地方直接下载，只能转换思路去爬取。目标有两个，要么是交易所;要么是行情类网站。
我选择了非小号这个平台，因为有历史数据页面。
通过浏览器的开发工具，很容易就可以通过get请求获得数据并解析。因为代码过于简单就不贴出来，有兴趣的朋友，可以点击btc_price_analyzer查看。
第二步，是计量200日的定投平均成本（即几何平均数）及价格比例，这正是pandas所擅长的。但当时的我完全没有经验，磕磕绊绊才写出了下面的代码。
def close_ratio(close, base): return close * 1.0 / base ma_list = [100, 200] //不知道为什么九神选择了200日均线，这里我把100日均线也打出来做对比。 for ma in ma_list: ma_str = str(ma) price_data[&amp;#39;GMA_&amp;#39; + ma_str] = price_data[&amp;#39;closeprice&amp;#39;].rolling( window=ma, min_periods=1).apply(gmean, raw=True) for ma in ma_list: ma_str = str(ma) price_data[&amp;#34;GMA_Ratio_&amp;#34; + ma_str] = price_data.apply( lambda x: close_ratio(x[&amp;#39;closeprice&amp;#39;], x[&amp;#39;GMA_&amp;#39; + ma_str]), axis=1) 唯一值得说明的是，pandas的rolling函数只有mean方法，而没有gmean的。我是引用了scipy包实现的。</description>
    </item>
    
    <item>
      <title>用Nginx配置https证书，你绝对不能忽略这一点！</title>
      <link>http://www.example.com/posts/nginx_https_ssl/</link>
      <pubDate>Tue, 24 Sep 2019 21:58:12 +0800</pubDate>
      
      <guid>http://www.example.com/posts/nginx_https_ssl/</guid>
      <description>前言 话说，刚刚过去的周六下午（ 我们是调休，可不是996哦 ），测试同学突然大叫，
 网站、小程序，怎么所有的功能都不work了!
 当时，那可是真的慌呀 &amp;gt;_&amp;lt;!!
还好强大的chrome第一时间提示，网站的SSL证书过期了。赶紧第一时间联系CTO，给证书绪个费。然后运维同学依次给服务器、CDN服务更新了证书，看到网站和小程序又可以访问了，大家都松了一口气，吐槽了一番，就开心过周末去了。
哪知道，周一刚回来，就听到运营的同学说有的客户反应一些爬虫和客户端服务程序都不工作了。
排查 几位后端的同学赶紧查了一通日志，发现很多后台的长驻服务，以及客户端的程序都是在调用登录接口的时候失败。
奇怪的是同样的https接口，浏览器中的前端程序调用就没问题，后端同学用postman调用就是失败的。根据postman的提示，把ssl关了一切就又好了。
一时间，大家都有些懵，虽说直觉告诉我一定和证书过期有关系，但是该更新的地方都更新了，问题会出在哪了？是不是有地方忘记更新了？
整个上午，百度、bing、google，搜索了大量nginx+https的文章，却大同小异。
话说该配置的都配置了，会不会是证书有问题呢？这个想法一闪而过的瞬间，下意识的 ll ，让我注意到了新的证书和备份的旧证书文件大小差了5kb。3kb VS 8kb，这个差距可不能忽略！
赶紧找运维同学重新下载了证书文件。
++咦？惊喜的发现第二个文件和第三个文件加起了不正好是8kb吗，这应该不是巧合。++
心想死马当活马医吧，把两文件一合并，扔到了服务上。nginx -s reload一敲，困扰了一上午的问题竟然好了！
之前做过区块链项目，有些密码学的基本知识，让我知道，这个大小5kb的文件应该是中间证书。（背景知识：根证书和中间证书的区别）
用这个中间证书+nginx+https来搜索，让我很快的找到了原因。
原来，如果在Apache中配置证书时，是有certificate chain这个属性来指定中间证书的。
Nginx没有Certificat Chain这个参数，如果有中间证书，需要把域名证书和中间证书合并，然后指定给ssl_certificate才行。
重要的事情再说一遍，
 用Nginx配置https证书，如果有中间证书，一定要和域名证书合并, 再指定给ssl_certificate。
 话说，我司的证书是在Go Daddy上买的，下载时没有nginx的选项，所以选择了Apache，中间证书是分开的，就踩了这个坑。如果证书厂商提供了nginx下载选项，那么下载的证书应是合并后的，就应该没有这个问题了.
总结和反思 虽说，这个问题是有惊无险的解决了，但值得反思和总结的是：
 公司创立刚满一年，很多机制还是不够健全，证书是到过期了才发现，没有事先的提醒。 在服务器操作配置文件，一定要备份，关键时刻比较文件大小也有奇效！:) 最后，用Nginx配置https证书时，中间证书一定要和域名证书合并！  </description>
    </item>
    
    <item>
      <title>为什么所有的查询条件都命中索引还是那么慢？记一次慢查询优化过程</title>
      <link>http://www.example.com/posts/slow_sql_analysis_1/</link>
      <pubDate>Thu, 19 Sep 2019 23:46:57 +0800</pubDate>
      
      <guid>http://www.example.com/posts/slow_sql_analysis_1/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
