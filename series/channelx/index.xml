<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>channelx on 稀里稀里哗啦啦</title>
    <link>http://www.example.com/series/channelx/</link>
    <description>Recent content in channelx on 稀里稀里哗啦啦</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Sep 2021 21:59:01 +0800</lastBuildDate><atom:link href="http://www.example.com/series/channelx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>玩转Golang的channel，二百行代码实现PubSub模式</title>
      <link>http://www.example.com/posts/golang_pubsub/</link>
      <pubDate>Tue, 21 Sep 2021 21:59:01 +0800</pubDate>
      
      <guid>http://www.example.com/posts/golang_pubsub/</guid>
      <description>引言 PubSub(Publish/Subscribe)模式，，意为“发布/订阅”模式，是为了解决一对多的依赖关系，使多个消费者同时监听某一个主题，不仅可以让生产者和消费者解耦，同时也让不同的消费者之间相互解耦（注：有些反模式依赖订阅者执行的先后顺序，使用共享数据来传递状态，是需要避免的，因为这样会使消费者耦合在一起，不能独立变化）。这其中的关键就在于需要有中介来维护订阅关系，并负责把生产的消息，传递给订阅方。
在 Golang 这门语言中，channel 天然就适合来当这个中介，下面就让我们一步步根据 PubSub 模式，实现工具类 EventBus.
定义类型 首先，让我们先定义一些基本类型和核心操作。
//EventID是Event的唯一标识 type EventID int64 //Event type Event interface { ID() EventID } //EventHandler type EventHandler interface { OnEvent(ctx context.Context, event Event) error CanAutoRetry(err error) bool } // JobStatus holds information related to a job status type JobStatus struct { RunAt time.Time FinishedAt time.Time Err error } //EventBus ... type EventBus struct {} func (eb *EventBus) Subscribe(eventID EventID, handlers ...EventHandler) { } func (eb *EventBus) Unsubscribe(eventID EventID, handlers .</description>
    </item>
    
    <item>
      <title>下次想在Golang中写个并发处理，就用这个模板，准没错！</title>
      <link>http://www.example.com/posts/golang_parallel_runner/</link>
      <pubDate>Fri, 07 May 2021 23:25:47 +0800</pubDate>
      
      <guid>http://www.example.com/posts/golang_parallel_runner/</guid>
      <description>引言 要说 Golang 中最引以为傲的特性，那非 goroutine 莫属，goroutine（协程）很轻量，相比于每个线程要使用 1MB 的内存，每个 go 协程只需要 1kb 左右就够了。
于是，在需要做并发处理的时候，很自然的就想着，go 一下就好了吗？ 示例代码如下
for i:=0; i &amp;lt; 5; i++ { go func(index int) { fmt.Println(index) }(i) //这里为什么要把i传进来呢？ 	} 这样可以并发处理请求了是不假，但如果其中一个请求出错了，需要退出怎么办了？ 一方面，可以自己实现这个错误处理（稍后会写），另一方面，也可以直接用 golang 官方errgroup
errorgoup 是个好东东 上面的示例代码，如果用 errgroup 来重新实现，会是下面这个样子
g, _ := errgroup.WithContext(context.Background()) for i := 0; i &amp;lt; 5; i++ { index := i g.Go(func() error { fmt.Println(index) return nil // 如果想Mock一些错误，也可以return一个error 	}) } if err = g.</description>
    </item>
    
    <item>
      <title>如何把golang的Channel玩出async和await的feel</title>
      <link>http://www.example.com/posts/channex_promise_actor/</link>
      <pubDate>Mon, 10 Feb 2020 22:35:48 +0800</pubDate>
      
      <guid>http://www.example.com/posts/channex_promise_actor/</guid>
      <description>引言 如何优雅的同步化异步代码，一直以来都是各大编程语言致力于优化的点，记得最早是C# 5.0加入了async/await来简化TPL的多线程模型，后来Javascript的Promise也吸取这一语法糖，在ES 6中也加入了async和await.
那么，被大家一称赞并发性能好、异步模型独树一帜的golang，能否也有async和await呢？
其实，这对于golang的CSM来说一点也不难！
核心代码如下：
done := make(chan struct{}) go func() { // do work asynchronously here 	// 	close(done) }() &amp;lt;-done 是不是很简单呢？ go rountine负责async， channel的负责await, 简直是完美！
但这个代码看起来还是有点丑，而且这个go func(){}还没有返回值，虽说可以通过闭包来接收返回值，但那个代码就更难维护了。
Go Promise 代码难看不要紧，只要Don&amp;rsquo;t repeat yourself (DRY)，封装一下不就好了？
type WorkFunc func() (interface{}, error) func NewPromise(workFunc WorkFunc) *Promise { promise := Promise{done: make(chan struct{})} go func() { defer close(promise.done) promise.res, promise.err = workFunc() }() return &amp;amp;promise } func (p *Promise) Done() (interface{}, error) { &amp;lt;-p.</description>
    </item>
    
    <item>
      <title>如何用Golang的channel实现消息的批量处理</title>
      <link>http://www.example.com/posts/channelx_aggregator/</link>
      <pubDate>Thu, 26 Sep 2019 23:25:47 +0800</pubDate>
      
      <guid>http://www.example.com/posts/channelx_aggregator/</guid>
      <description>引言 话说，有这样一个场景，就是客户送不断发送消息，需要服务端异步处理。
一个一个的处理未免有些浪费资源，更好的方法是批量处理。
当消息量特别大时，使用kafka之类的message queue自然是首选，但更多的时候，我们想用更加轻量的方案来解决这个问题。
下面来详细分析一下技术需求，这个方案需要实现以下几点：
 消息聚合后处理（最大条数为BatchSize） 延迟处理（延迟时间为LingerTime） 自定义错误处理 并发处理  实现 基于这样的需求，我快速的实现了第一步，消息聚合后处理。
var ( eventQueue = make(chan interface{}, 4) batchSize = 8 workers = 2 batchProcessor = func(messages []interface{}) { fmt.Printf(&amp;#34;%+v \n&amp;#34;, messages) } ) for i := 0; i &amp;lt; workers; i++ { go func() { var batch []interface{} for { msg := &amp;lt;-eventQueue batch = append(batch, msg) if len(batch) == batchSize { batchProcessor(batch) batch = make([]interface{}, 0) } } }() } for i := 0; i &amp;lt; 100; i++ { eventQueue &amp;lt;- i } 代码虽然简单，但是核心已经有了。</description>
    </item>
    
    <item>
      <title>如何把Golang的channel用的如nodejs的stream一样丝滑</title>
      <link>http://www.example.com/posts/channelx_stream/</link>
      <pubDate>Fri, 13 Sep 2019 23:43:24 +0800</pubDate>
      
      <guid>http://www.example.com/posts/channelx_stream/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
