<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thinking on 稀里稀里哗啦啦</title>
    <link>http://www.example.com/tags/thinking/</link>
    <description>Recent content in Thinking on 稀里稀里哗啦啦</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Jan 2020 22:40:17 +0800</lastBuildDate>
    
	<atom:link href="http://www.example.com/tags/thinking/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从医院排队浅谈IO调度模型</title>
      <link>http://www.example.com/posts/hospital_queueing_verse_io_model/</link>
      <pubDate>Thu, 16 Jan 2020 22:40:17 +0800</pubDate>
      
      <guid>http://www.example.com/posts/hospital_queueing_verse_io_model/</guid>
      <description>引言 前段时间，小孩生病，前前后后去了好多次医院，在排队等候之余，不禁想到，这可以类比IO调度。
同步阻塞IO 那个周五，我下班回到家后，发现小孩又发烧了，当即决定去儿童医学中心看看。
晚上，只能挂急诊（*那时现场人数多的可以堪比春运火车站*）。挂完号了，虽然前面也有许多人，但因为心里着急，就在现场盯着叫号的屏幕慢慢的等，而且大半夜的也无处可去。
这不就是同步IO吗？（*请不要抬杠说，我可以边看手机边等*）
同步非阻塞 急诊看完后的第二天，小孩要接着挂水，但却要重新挂号。这时也不能提前预约，其中一个原因是，必须要等16个小时后才能第二次挂水。
当时，没有经验我们，卡着时间去门诊挂的号，却发现门诊也是人满为患。但天色还早，于是就在附近逛着玩，每过一会儿就去看看快到自己了不。
是不是很像轮询，也就是同步非阻塞IO了。
IO多路复用 第三次去医院的时候，有了新的发现，原来绑定了医保卡后，可以在医院的微信公众号里看到排队的情况。
虽然那日依旧等了3、4个小时，但是因为不用在医院时不时的看下排队进展，于是在一定程度上解放了我们。我们是在商场里玩了好久，等到快到的时候才去，也正好赶上轮到我们。
那为什么这样是IO多路复用呢？
原因是我们没有自己在医院盯着屏幕看自己的排队进展，而是由医院的排队系统在帮所有人盯着。（*不知道这样理解有没有问题*）
但医院的这个排队系统，不如美味不用等的系统，它不能做到，快到你的号时候，发通知给你，它是把进展通知给所有人，再由接收的人自己判断处理。所以如果说美味不用等的通知模式像epoll了，那么使用医院的排队系统，可以勉强说成是poll了。
异步IO 话说，久病成医。医院去的次数多了，也让我发现了医院排队系统的一个空子，那就是只要挂号后在诊室签过到，那么即使你到时过号了，只要补签就可以插队到前5%左右，这时等不了几个人就可以轮到你了。
于是，后面就是上午我先一个人跑去先挂个号，在诊室前签完到后，就该干吗干吗去了。然后，等到下午，上午的病人基本上看的差不多了，再带着娃去。虽然已经过号，但补签后还是可以很快的轮到。
这个小技巧虽说不能做到100%的异步IO，即最后还是要等一会儿的，而不是到了就可以直接找医生看病，但是已经极大的提升了我们作为个体的排队体验。（*这么做有个副作用是，因为叫到这个号，患者一时间没到，医生是要多次叫号确认的，也就增加了医生的空档时长，在一定程度上降低了医生的效率。只好自我欺骗一下，这也算是给医生增加一段休息时间吗？*）
话说回来，即使是提前预约，到了也是要再等会儿的。对公立医院来说，想要体验“异步IO”，难哦！
后记 自己是因医院排队，有感而发，文中有不准确的地方，欢迎指正。
之前看过漫谈五种IO模型（主讲IO多路复用）, 我觉得这篇文章里的例子更容易理解，推荐大家看看。</description>
    </item>
    
    <item>
      <title>关于面试，我有话说</title>
      <link>http://www.example.com/posts/interview_another_thinking/</link>
      <pubDate>Mon, 16 Dec 2019 22:46:01 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_another_thinking/</guid>
      <description>引言 话说距离上次写的关于面试的换位思考已过去一个半月有余，这段时间，我不仅找到了下一份工作，并且在入职又成为了面试官。目前负责从头开始组建上海开发团队，面试可是头一次成为我工作的重心。
谈起面试，这两年我是没少折腾，工作换了三次，大大小小面试下来估计有30次，好像比我面试别人的次数都多。
自己的面试策略基本是“以赛代练”，通常不断的面试，找到自己的薄弱之处，然后做针对性的加强。
如何面试候选人 但是，换个位置，身为面试官，应该如何制定自己的考察策略呢？
“攻防同源”，从具体问题出发，我回想之前面试过的公司，后端面试的问题基本上可以分为以下几类： 1. 纯算法或者数据结构 2. 编程语言特性。比如： golang的GPM，js的delete操作符。 3. Redis的使用。高并发下缓存的设计和分布式锁问的最的次数最多。 4. MySql的索引和锁（这个基本上是必问）。 5. 项目经验（*貌似项目经验的问题比较少，一方面，也许是很难有同样的项目，可以直接复用经验；另一方面，需要面试官从你的描述中甄别出你实际贡献的价值，对面试官何尝不是一种考验*） 6. 线下大作业（talk is cheap, show me the code。 说不定这是最好的方式，只是需要候选人花更多的时间）
在上一篇文章中，我认为1-4的考查方式是基于易量化、易衡量的角度，这种简单又直接的考察对“买方”市场，即不差人来面试的大厂不失为一种好方法。毕竟如果一天要面5、6个人，没个模板辅助，实在是没精力一个个问下来。（*于是，现在流行面试也是可以背过的*）
那如果没那么多人来面试，是不是就要以项目经验为主呢？（*一定不能非黑即白*）
这点还真是有待考虑的，有的人是做了很多但却说不出来；或者是说的很“*简单*”，让你丝毫感觉不到价值；但最怕的是，一个人说的天花烂醉，实际确眼高手低，入职后，还是个害群之马。
Best Fit优于Best Engineer 想来想去，如果真有什么策略的话，我觉得就一个，找合适的。
这还真不是费话！很久之前（*估计三年前吧*）， 身为工程师的我一度认为招人一定要招Best Engineer，当自己的职位变成team lead后，需要考虑更多的角度，取舍平衡后，要找的是Best Fit！
这个Fit的程度，一方面取决于具体的技能要求；另一方面，也受招聘团队的现有人员组成、职位预算、招聘的不同阶段、管理成本甚至是三观是否一致而定。
所以，如果你曾经遇到过聊的很好，但却没收到offer的情况，那可能真的不是你实力不行，更可能是在其它方面，你很可惜，不是最合适的（*想到这，不禁释怀过去没能拿到offer的几次面试*）。
而我现在公司thunes上海团队开放的职位有两个，全栈开发（vueJs+python或golang）和后端开发golang。
考虑到马上要开始的新项目，自己的技术栈储备，眼下对我来说，招一个全栈开发，或者产前端实力优于后端的开发是最符合我眼下需求的。我们的面试主要以大作业为主，更看重候选人的工程能力。欢迎大家自荐和推荐。简历请发送邮箱jeremy.liu@thunes.com。
话说，怎么写着写着就成招聘贴了……</description>
    </item>
    
    <item>
      <title>关于面试的换位思考</title>
      <link>http://www.example.com/posts/interview_reverse_thinking/</link>
      <pubDate>Tue, 22 Oct 2019 22:42:30 +0800</pubDate>
      
      <guid>http://www.example.com/posts/interview_reverse_thinking/</guid>
      <description>我当面试官时 之前公司招后端程序员的时候，我负责考察面试者golang的掌握程度。
通常我是要求面试者上机用channel写一个多常驻协程的任务队列，然后再不断的延伸发问，考察面试者对goroutine和channel的掌握。
如果面试者写不出来，我基本是不给过的。因为这是我认为的一个golang程序与其它语言程序最大的不同，如果写不出来就代表没真正的用过golang。
我当面试者时 风水轮流转，公司因为融资问题，经营不下去了，我只能再次踏上找工作的路。
虽说在这份工作中，我得到了自己想要的golang工作经历，但是对golang语言细节的掌握还是有些粗糙的。而转型当互联网行业的开发后，我对redis和kafka之类mq的使用，还不曾有过深入的使用，也成了自己的软肋。
最近的一次面试，就是挂在了这上面。
关于，golang的GPM、协程的调度方式，包的初始化顺序等细节问题，我没有答上来。加上偏偏他又问我有没有用过redis和kafka，和数据库有几种锁。。
虽说这些知识点不是完全不知道（*但回答的不是很准确*），可能会缺乏解决某些问题的能力，但具体是哪些问题呢？面试官又说不清楚。
我之前是不大认可这种搜索就能得到答案的问题，但换个角度来想。
一个面试官如何考察面试者的水平？ 无非是基于他认为是重要的知识点！于是，不免有认知偏见。
话说回来，对于一个工程师而言，最重要的不应该是他的学习和解决问题的能力吗？
对于一个资深的程序员，分析问题并合理的设计可扩展可维护的方案不才是他的价值所在吗？
那么，为什么面试时确要用语言细节+使用的工具经验来考察面试者呢？甚至还会是用纯算法来考察面试者？
想来想去，我的初步结论是：学习能力、解决问题的能力和设计能力难以被量化衡量，所以只能间接的借用一些特征来辅助判断，比如说语言的掌握程度、算法能力等。
再加上国内的互联网企业的招聘更重视“开箱即用”，所以才有用没用过、知不知道之类的问题吧。
接着换位思考一下，如果面试者这些不知道、没用过，只表示说愿意学，确实对面试官没很大的吸引力，毕竟来面试的人又不少。
写到这时，突然领悟，面试的考察方式在根本上取决于到底是买方市场还是卖方市场。
好吧，赶紧睡了，明天还要抓紧刷&amp;rdquo;面试常问题库&amp;rdquo;呢 ^_^</description>
    </item>
    
  </channel>
</rss>